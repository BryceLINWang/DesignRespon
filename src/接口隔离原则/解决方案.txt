解决方案
将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。‘
也就是采用接口隔离原则。

类A依赖接口I中的方法1、方法2、方法3，类B是对类A依赖的实现。
类C依赖接口I中的方法1、方法4、方法5，类D是对类C依赖的实现。
对于类B和类D来说，虽然他们都存在着用不到的方法（也就是图中红色字体标记的方法），
但由于实现了接口I，所以也必须要实现这些用不到的方法。

可以看到，如果接口过于臃肿，只要接口中出现的方法，不管对依赖于它的类有没有用处，
实现类中都必须去实现这些方法，这显然不是好的设计。
如果将这个设计修改为符合接口隔离原则，就必须对接口I进行拆分。
在这里我们将原有的接口I拆分为三个接口，

接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，
尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。
本文例子中，将一个庞大的接口变更为3个专用的接口所采用的就是接口隔离原则。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的"契约"，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。

说到这里，很多人会觉的接口隔离原则跟之前的单一职责原则很相似，其实不然。
其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，
主要针对抽象，针对程序整体框架的构建。

采用接口隔离原则对接口进行约束时，要注意以下几点：

接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。